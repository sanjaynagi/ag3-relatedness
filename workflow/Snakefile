## Snakefile for genomic surviellance of Anopheles gambiae
import pandas as pd
import numpy as np

configfile: "config/config.local_example.yaml"
include: "rules/common.smk"

# dataset
contigs = config['contigs']
dataset = config['dataset']
cloud = config['VObsCloud']['activate']
ag3_sample_sets = config['VObsCloud']['sample_sets']

configInputs = [cloud, config['Zarr']['activate'], config['VCF']['activate']]
assert any(configInputs), "Cloud, Zarr and VCF input are all deactivated. Please activate one in the specified config file!"
assert singleTrue(configInputs), "More than one of Cloud, Zarr and VCF input are activated, Please only activate one in the specified config file!"

# Load metadata 
if cloud:
    import malariagen_data
    ag3 = malariagen_data.Ag3()
    metadata = ag3.sample_metadata(sample_sets=ag3_sample_sets)
else:
    metadata = pd.read_csv(config['metadata'], sep="\t")

# Determine cohorts for each analysis
cohorts = getCohorts(metadata,  columns=config['metadataCohortColumns'], minPopSize=15) # general analyses
PCAcohorts = getCohorts(metadata, columns=config['PopulationStructure']['PCA']['colourColumns']) # PCA

if config['Selection']['PBS']['activate']:
    PBScohorts = getCohorts(metadata, columns=config['metadataCohortColumns'], comparatorColumn=config['Selection']['PBS']['metadataComparatorColumn'], minPopSize=15)
    PBScohorts = PBScohorts.dropna()
else:
    PBScohorts = getCohorts(metadata,  columns=config['metadataCohortColumns'], minPopSize=15)

vals = np.arange(200,201)
random_idx = ['%0.4d' % i for i in vals]

random_pbs_cohorts = ['.'.join(np.array(coh.split("."))[[2,0,1]]) for coh in PBScohorts['cohortNoSpaceText']]
random_h12_cohorts = ['.'.join(np.array(coh.split("."))[[2,0,1]]) for coh in cohorts['cohortNoSpaceText']]

rule all:
    input:
        getSelectedOutputs,
        #expand("randomisations/H12/.complete_H12_{cohort}_{pheno}{i}.{contig}", i=random_idx, pheno=['alive', 'dead'], cohort=random_h12_cohorts, contig=['2L', '2R', '3L', '3R', 'X']),
        #expand("randomisations/PBS/.complete_PBS_{cohort}.{i}.{contig}", i=random_idx, cohort=random_pbs_cohorts, contig=['2L', '2R', '3L', '3R', 'X']),
        #expand("randomisations/H12/H12_{cohort}_{pheno}{i}.{contig}.png", i=random_idx, pheno=['alive', 'dead'], cohort=random_h12_cohorts, contig=['2L', '2R', '3L', '3R', 'X']),
        #expand("randomisations/PBS/PBS_PBS{cohort}.{i}.{contig}.png", cohort=random_pbs_cohorts, contig=['2L', '2R', '3L', '3R', 'X'], i=random_idx),


include: "rules/utility.smk"
include: "rules/qc.smk"
include: "rules/PopulationStructure.smk"
include: "rules/selection.smk"
#include: "rules/karyotype.smk"

### plan for inputs 
# if Zarr present and VCF not, write lightweight VCF to file.
# if VCF present and Zarr not, write Zarrs to file
# Use Zarrs for all python analyses.
# Use VCFs for programs that require VCF
# How to determine name of VCF or Zarrs? use input function, if VCF provided use provided name, if 
# not provided, use default name. Same for Zarr. 
# provide metadata column name to split into populations (i.e location), optionally, provide multiple columns to split 
# into groups i.e location | species | year. 
# 
# Need to figure out what to with colours. Give colour column? 
#
# choose ngsRelate contigs 
# AgMONITOR
# 
# VOI - Bokeh plots, all VOIs, map of sample area showing predicted AFs
# some sort of 2d spatial interpolation of allele frequencies, or likelihood based geostatistic modelling
#
#
# PopulationStructure
# 
# - doubleton sharing, haplotype sharing, IBD tracts 
# 
# diversity 
# - conf intervals 
