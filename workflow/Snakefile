## Snakefile for analyses into the imputation and phasing of low cov sequencing data in Anopheles gambiae
import pandas as pd
import numpy as np

# Phase 3 metadata
#metadata = pd.read_csv("resources/Ag1000g.phase3.manifest.full.tsv", sep="\t")

# Low Cov metadata
gaardian = pd.read_csv("resources/metadata/wgs_snp_data.csv", sep=",")


rule all:
    input:
            vcf = expand("results/singleSamplevcfs/{sampleID}.vcf.gz", sampleID=gaardian['partner_sample_id']),
            vcf = "results/ag3_gaardian.vcf.gz"

#include: "rules/common.smk"

rule downloadVCFs:
    """
    Download single-sample VCFs 
    """
    output:
        vcf = "results/singleSamplevcfs/{sampleID}.vcf.gz"
    log:
        log = "logs/wget_gz_index/{sampleID}.log"
    params:
        prefix=lambda w, output: os.path.splitext(output[0])[0],
        url = lambda wildcards: gaardian[
                gaardian['partner_sample_id'] == wildcards.sampleID
                ].snp_genotypes_vcf.tolist()
    shell:
        """
        wget {params.url} -O {params.prefix} 2> {log}
        bgzip {params.prefix} 2>> {log}
        """


rule tabix:
    input:
        calls = "results/singleSamplevcfs/{sampleID}.vcf.gz",    
    output:
        calls_tbi = "results/singleSamplevcfs/{sampleID}.vcf.gz.tbi",
    log:
        "logs/tabix/{sampleID}.log",
    shell:
        """
        tabix {input.calls} 2> {log}
        """

rule bcftoolsMerge:
    input:
        vcfs = expand("results/singleSamplevcfs/{sampleID}.vcf.gz", sample=gaardian['partner_sample_id']),
        idx = expand("results/singleSamplevcfs/{sampleID}.vcf.gz.tbi", sample=gaardian['partner_sample_id'])
    output:
        vcf = "results/ag3_gaardian.vcf.gz",
    log:
        "logs/bcftoolsMerge.log",
    threads: 12
    shell:
        """
        bcftools merge --threads {threads} -o {output.vcf} -O z {input.vcfs} 2> {log}
        """